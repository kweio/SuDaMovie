{"ast":null,"code":"export default {\n  data() {\n    // 售价自定义校验规则\n    let checkPrice = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(\"售价不能为空\"));\n      } else {\n        if (/^(0(?!\\.00)|[1-9]\\d{0,6})\\.\\d{2}$/.test(value)) {\n          callback();\n        } else {\n          callback(new Error(\"请输入正确格式的售价\"));\n        }\n      }\n    };\n    return {\n      // 对话框显示标题\n      dialogTitle: \"\",\n      // 对话框显示状态\n      dialogFormVisible: false,\n      // 添加或编辑排片信息\n      planInfo: {\n        name: \"\",\n        movieId: \"\",\n        cinema: \"\",\n        hall: \"\",\n        inDate: \"\",\n        outDate: \"\",\n        outTime: \"\",\n        leaveTime: \"\",\n        sale: \"\"\n      },\n      // 排片列表数据\n      planList: [],\n      // 影院列表数据\n      cinemaList: [],\n      // 电影列表数据\n      movieList: [],\n      // 影厅列表数据\n      hallList: [],\n      // 放映时间选项\n      outTimeOptions: [{\n        label: \"08:05\",\n        value: \"08:05\"\n      }, {\n        label: \"12:05\",\n        value: \"12:05\"\n      }, {\n        label: \"16:05\",\n        value: \"16:05\"\n      }, {\n        label: \"20:05\",\n        value: \"20:05\"\n      }],\n      // 散场时间选项\n      leaveTimeOptions: [{\n        label: \"11:05\",\n        value: \"11:05\"\n      }, {\n        label: \"12:05\",\n        value: \"12:05\"\n      }, {\n        label: \"15:05\",\n        value: \"15:05\"\n      }, {\n        label: \"16:05\",\n        value: \"16:05\"\n      }, {\n        label: \"23:05\",\n        value: \"23:05\"\n      }, {\n        label: \"00:05\",\n        value: \"00:05\"\n      }],\n      // 放映日期设置时间只能往后选，之前的禁用\n      datePickerOptions: {\n        disabledDate: this.disabledDate\n      },\n      // 表单验证规则\n      planInfoFormrules: {\n        name: [{\n          required: true,\n          message: \"电影名不能为空\",\n          trigger: \"change\"\n        }],\n        cinema: [{\n          required: true,\n          message: \"影院名不能为空\",\n          trigger: \"change\"\n        }],\n        hall: [{\n          required: true,\n          message: \"影厅名不能为空\",\n          trigger: \"change\"\n        }],\n        outDate: [{\n          required: true,\n          message: \"放映日期不能为空\",\n          trigger: \"change\"\n        }],\n        outTime: [{\n          required: true,\n          message: \"放映时间不能为空\",\n          trigger: \"change\"\n        }],\n        sale: [{\n          required: true,\n          validator: checkPrice,\n          trigger: \"blur\"\n        }]\n      },\n      // 分页器样式\n      queryInfo: {\n        // 每页显示的条数\n        pageSize: 7,\n        // 当前页数\n        currentPage: 1,\n        // 总页数\n        total: 0\n      },\n      // 搜索框内容\n      searchContent: \"\"\n    };\n  },\n  methods: {\n    //限制可选日期\n    disabledDate(time) {\n      let curDate = new Date().getTime();\n      const two = 2 * 24 * 60 * 60 * 1000;\n      const twoDays = curDate + two;\n      return time.getTime() < Date.now() || time.getTime() > twoDays; //小于当前的禁止，大于2天前的禁止\n    },\n\n    // 获取影院列表\n    async getCinemaList() {\n      const {\n        data\n      } = await this.$http.get(\"/rest/cinemas\");\n      this.cinemaList = data.allData;\n      // console.log(\"影院列表\", this.cinemaList);\n    },\n\n    // 获取电影列表\n    async getMovieList() {\n      const {\n        data\n      } = await this.$http.get(\"/rest/movies\");\n      this.movieList = data.allData;\n      // console.log(\"电影列表数据\", this.movieList);\n    },\n\n    // 获取选中的电影数据，从而取出对应电影上映时间数据\n    async getInDateData(val) {\n      // console.log(val);\n      // 选中按钮点击清除按钮时，val为空\n      if (!val) {\n        return this.planInfo.inDate = \"\";\n      }\n      const data = this.movieList.filter(item => item.name == val);\n      // console.log(data);\n      this.planInfo.inDate = data[0].time;\n      this.planInfo.movieId = data[0]._id;\n    },\n    // 获取选中的影院数据，从而取出影厅数据\n    async getHallList(val) {\n      if (!val) {\n        // 在点击清空的时候，val为空，清空数据\n        this.planInfo.hall = \"\";\n        this.hallList = [];\n      } else {\n        const data = this.cinemaList.filter(item => item._id == val);\n        this.hallList = data[0].children;\n      }\n    },\n    // 获取排片列表\n    async getPlanList() {\n      let res;\n      if (!this.searchContent) {\n        // 如果搜索框内容为空\n        const {\n          data\n        } = await this.$http.get(\"/rest/plans\", {\n          params: {\n            ...this.queryInfo\n          }\n        });\n        res = data;\n        // console.log(res);\n      } else {\n        // 如果搜索框内容不为空\n        const {\n          data\n        } = await this.$http.get(`/rest/plans/${this.searchContent}`, {\n          params: {\n            ...this.queryInfo\n          }\n        });\n        res = data;\n        // console.log(res);\n      }\n      // console.log(res);\n      if (res.data) {\n        this.planList = JSON.parse(JSON.stringify(res.data));\n      }\n      if (res.total) {\n        this.queryInfo.total = JSON.parse(JSON.stringify(res.total));\n      }\n      console.log(\"排片列表数据\", this.planList);\n    },\n    // 添加排片\n    addPlan() {\n      // 清空排片列表\n      this.planInfo = {};\n      this.dialogTitle = \"添加排片\";\n      this.dialogFormVisible = true;\n    },\n    // 确定对话框\n    managePlanInfo() {\n      this.$refs.planInfoForm.validate(async valid => {\n        // 表单验证不通过\n        if (!valid) {\n          return this.$message.error(\"请合法输入必填信息\");\n        }\n        // 表单验证通过,发送网络请求,先判断时添加排片还是编辑排片\n        let data;\n        if (this.dialogTitle === \"添加排片\") {\n          data = await this.$http.post(\"/rest/plans\", this.planInfo);\n        } else {\n          data = await this.$http.put(`/rest/plans/${this.planInfo._id}`, this.planInfo);\n        }\n        // 后端数据验证不通过\n        if (!data.data.status) {\n          return this.$message({\n            message: data.data.message,\n            type: \"error\"\n          });\n        }\n        // 后端数据验证通过\n        if (this.dialogTitle === \"添加排片\") {\n          this.$message({\n            message: \"添加成功\",\n            type: \"success\"\n          });\n        }\n        if (this.dialogTitle === \"编辑排片\") {\n          this.$message({\n            message: \"修改成功\",\n            type: \"success\"\n          });\n        }\n        this.getPlanList();\n        this.dialogFormVisible = false;\n        // 清空planInfo数据\n        this.planInfo = {};\n      });\n    },\n    // 取消对话框\n    cancel() {\n      // console.log(this.planInfo);\n      this.dialogFormVisible = false;\n      // 清空planInfo数据\n      this.planInfo = {};\n    },\n    // 编辑排片\n    handleEdit(row) {\n      this.dialogTitle = \"编辑排片\";\n      // 这里拿到的row直接赋值是浅拷贝，JSON赋值是深拷贝\n      // 如果浅拷贝，Bug：点击编辑出现对话框修改数据，点击取消列表数据会变\n      // 但其实并没发请求，刷新后又变回原样\n      this.planInfo = JSON.parse(JSON.stringify(row));\n      this.planInfo.cinema = this.planInfo.cinema._id;\n      // 这里因为影厅数据是从hallList里面取的，而hallList的数据是根据cinema选择器选中后触发getHallList函数取到值来决定，这里直接赋值不会触发该函数，所以要手动触发\n      this.getHallList(this.planInfo.cinema);\n      this.planInfo.hall = this.planInfo.hall._id;\n      this.planInfo.movieId = this.planInfo.movieId._id;\n      // console.log(this.planInfo);\n      this.dialogFormVisible = true;\n    },\n    // 撤销电影\n    async handleDelete(row) {\n      const confirmResult = await this.$confirm(`是否确定要撤销电影:${row.name}?`, \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\",\n        center: true\n      }).catch(err => err);\n      if (confirmResult === \"confirm\") {\n        // 删除成功，发送删除数据请求\n        const data = await this.$http.delete(`/rest/plans/${row._id}`);\n        // 删除后，更新列表\n        this.getPlanList();\n        this.$message({\n          type: \"success\",\n          message: \"删除成功\"\n        });\n      } else {\n        this.$message({\n          type: \"info\",\n          message: \"已取消删除\"\n        });\n      }\n    },\n    // 分页器当前页面变动时触发\n    handleCurrentChange(val) {\n      this.queryInfo.currentPage = val;\n      this.getPlanList();\n    },\n    // 搜索框搜索\n    async handleSearch() {\n      this.getPlanList();\n    }\n  },\n  created() {\n    // 获取排片列表\n    this.getPlanList();\n    // 获取影院列表\n    this.getCinemaList();\n    // 获取电影列表\n    this.getMovieList();\n  }\n};","map":{"version":3,"mappings":"AAwOA;EACAA;IACA;IACA;MACA;QACAC;MACA;QACA;UACAA;QACA;UACAA;QACA;MACA;IACA;IACA;MACA;MACAC;MACA;MACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACA;MACAC;MACA;MACAC;MACA;MACAC;MACA;MACAC;MACA;MACAC,iBACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,EACA;MACA;MACAC,mBACA;QAAAF;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,EACA;MACA;MACAE;QACAC;MACA;MACA;MACAC;QACAnB,OACA;UAAAoB;UAAAC;UAAAC;QAAA,EACA;QACApB,SACA;UAAAkB;UAAAC;UAAAC;QAAA,EACA;QACAnB,OACA;UAAAiB;UAAAC;UAAAC;QAAA,EACA;QACAjB,UACA;UAAAe;UAAAC;UAAAC;QAAA,EACA;QACAhB,UACA;UAAAc;UAAAC;UAAAC;QAAA,EACA;QACAd;UAAAY;UAAAG;UAAAD;QAAA;MACA;MACA;MACAE;QACA;QACAC;QACA;QACAC;QACA;QACAC;MACA;MACA;MACAC;IACA;EACA;EACAC;IACA;IACAX;MACA;MACA;MACA;MACA;IACA;;IACA;IACA;MACA;QAAAvB;MAAA;MACA;MACA;IACA;;IACA;IACA;MACA;QAAAA;MAAA;MACA;MACA;IACA;;IACA;IACA;MACA;MACA;MACA;QACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACA;MACA;QACA;QACA;QACA;MACA;QACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;UAAAA;QAAA;UACAmC;YACA;UACA;QACA;QACAC;QACA;MACA;QACA;QACA;UAAApC;QAAA,yBACA,qCACA;UACAmC;YACA;UACA;QACA,EACA;QACAC;QACA;MACA;MACA;MACA;QACA;MACA;MACA;QACA;MACA;MACAC;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;QACA;QACA;UACA;QACA;QACA;QACA;QAEA;UACAvC;QACA;UACAA,4BACA,oCACA,cACA;QACA;QACA;QACA;UACA;YACA0B;YACAc;UACA;QACA;QACA;QACA;UACA;YACAd;YACAc;UACA;QACA;QACA;UACA;YACAd;YACAc;UACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACA;MACA,0CACA,0BACA,MACA;QACAC;QACAC;QACAJ;QACAK;MACA,EACA;MACA;QACA;QACA;QACA;QACA;QACA;UACAL;UACAd;QACA;MACA;QACA;UACAc;UACAd;QACA;MACA;IACA;IACA;IACAoB;MACA;MACA;IACA;IACA;IACA;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AACA","names":["data","callback","dialogTitle","dialogFormVisible","planInfo","name","movieId","cinema","hall","inDate","outDate","outTime","leaveTime","sale","planList","cinemaList","movieList","hallList","outTimeOptions","label","value","leaveTimeOptions","datePickerOptions","disabledDate","planInfoFormrules","required","message","trigger","validator","queryInfo","pageSize","currentPage","total","searchContent","methods","params","res","console","addPlan","managePlanInfo","type","cancel","handleEdit","confirmButtonText","cancelButtonText","center","handleCurrentChange","created"],"sourceRoot":"src/views/Home","sources":["MoviePlan.vue"],"sourcesContent":["<template>\n  <div class=\"Plan\">\n    <!--搜索-->\n    <div class=\"top\">\n      <el-col :span=\"15\">\n        <el-input\n          placeholder=\"请输入电影名\"\n          class=\"input-with-select\"\n          style=\"width: 100%\"\n          v-model=\"searchContent\"\n          clearable\n          @input=\"handleSearch\"\n        >\n          <el-button slot=\"append\" icon=\"el-icon-search\">搜索</el-button>\n        </el-input>\n      </el-col>\n      <el-col :span=\"2\" :offset=\"1\">\n        <el-button type=\"primary\" size=\"small\" @click=\"addPlan\"\n          >安排电影</el-button\n        >\n      </el-col>\n    </div>\n    <!-- 表格 -->\n    <div class=\"plan-table\">\n      <el-table border :data=\"planList\">\n        <el-table-column\n          label=\"电影名\"\n          width=\"150\"\n          show-overflow-tooltip\n          prop=\"name\"\n        ></el-table-column>\n        <el-table-column\n          label=\"影院名\"\n          width=\"150\"\n          prop=\"cinema.name\"\n          show-overflow-tooltip\n        ></el-table-column>\n        <el-table-column\n          label=\"放映大厅\"\n          width=\"120\"\n          show-overflow-tooltip\n          prop=\"hall.name\"\n        ></el-table-column>\n        <el-table-column\n          label=\"放映日期\"\n          width=\"120\"\n          show-overflow-tooltip\n          prop=\"outDate\"\n        ></el-table-column>\n        <el-table-column\n          label=\"放映时间\"\n          show-overflow-tooltip\n          width=\"80\"\n          prop=\"outTime\"\n        ></el-table-column>\n        <el-table-column\n          label=\"售价(元)\"\n          show-overflow-tooltip\n          prop=\"sale\"\n        ></el-table-column>\n        <el-table-column align=\"center\" width=\"150\" label=\"操作\">\n          <template slot-scope=\"scope\">\n            <el-button size=\"mini\" @click=\"handleEdit(scope.row)\"\n              >编辑</el-button\n            >\n            <el-button\n              size=\"mini\"\n              type=\"danger\"\n              @click=\"handleDelete(scope.row)\"\n              >撤销</el-button\n            >\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n    <!-- 分页器 -->\n    <el-pagination\n      @current-change=\"handleCurrentChange\"\n      :current-page=\"queryInfo.currentPage\"\n      :page-size=\"queryInfo.pageSize\"\n      layout=\"total, prev, pager, next, jumper\"\n      :total=\"queryInfo.total\"\n      style=\"margin-top: 20px\"\n    >\n    </el-pagination>\n    <!-- 添加或编辑排片对话框 -->\n    <div>\n      <el-dialog\n        :title=\"dialogTitle\"\n        :visible.sync=\"dialogFormVisible\"\n        :modal-append-to-body=\"false\"\n        v-if=\"dialogFormVisible\"\n        :showClose=\"false\"\n        :close-on-click-modal=\"false\"\n        top=\"5vh\"\n      >\n        <el-form\n          label-width=\"80px\"\n          :model=\"planInfo\"\n          :rules=\"planInfoFormrules\"\n          ref=\"planInfoForm\"\n        >\n          <el-form-item label=\"电影名\" prop=\"name\">\n            <el-col :span=\"16\">\n              <el-select\n                v-model=\"planInfo.name\"\n                clearable\n                placeholder=\"请选择电影名\"\n                style=\"width: 100%\"\n                @change=\"getInDateData\"\n              >\n                <el-option\n                  v-for=\"item in movieList\"\n                  :key=\"item._id\"\n                  :value=\"item.name\"\n                  :label=\"item.name\"\n                ></el-option>\n              </el-select>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"影院名\" prop=\"cinema\">\n            <el-col :span=\"16\">\n              <el-select\n                v-model=\"planInfo.cinema\"\n                clearable\n                placeholder=\"请选择影院名\"\n                style=\"width: 100%\"\n                @change=\"getHallList\"\n              >\n                <el-option\n                  v-for=\"item in cinemaList\"\n                  :key=\"item._id\"\n                  :value=\"item._id\"\n                  :label=\"item.name\"\n                ></el-option>\n              </el-select>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"影厅名\" prop=\"hall\">\n            <el-col :span=\"16\">\n              <el-select\n                v-model=\"planInfo.hall\"\n                clearable\n                placeholder=\"请选择影厅名\"\n                style=\"width: 100%\"\n              >\n                <el-option\n                  v-for=\"item in hallList\"\n                  :key=\"item._id\"\n                  :value=\"item._id\"\n                  :label=\"item.name\"\n                ></el-option>\n              </el-select>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"放映时间\" prop=\"outTime\">\n            <el-col :span=\"16\">\n              <el-select\n                v-model=\"planInfo.outTime\"\n                clearable\n                placeholder=\"请选择放映时间\"\n                style=\"width: 100%\"\n              >\n                <el-option\n                  v-for=\"item in outTimeOptions\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></el-option>\n              </el-select>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"散场时间\" prop=\"outTime\">\n            <el-col :span=\"16\">\n              <el-select\n                v-model=\"planInfo.leaveTime\"\n                clearable\n                placeholder=\"请选择放映时间\"\n                style=\"width: 100%\"\n              >\n                <el-option\n                  v-for=\"item in leaveTimeOptions\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></el-option>\n              </el-select>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"上映日期\" prop=\"inDate\">\n            <el-col :span=\"16\">\n              <el-date-picker\n                v-model=\"planInfo.inDate\"\n                readonly\n                type=\"date\"\n                value-format=\"yyyy-MM-dd\"\n                style=\"width: 100%\"\n              >\n              </el-date-picker>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"放映日期\" prop=\"outDate\">\n            <el-col :span=\"16\">\n              <el-date-picker\n                v-model=\"planInfo.outDate\"\n                type=\"date\"\n                value-format=\"yyyy-MM-dd\"\n                style=\"width: 100%\"\n                :picker-options=\"datePickerOptions\"\n              >\n              </el-date-picker>\n            </el-col>\n          </el-form-item>\n          <el-form-item label=\"电影售价\" prop=\"sale\">\n            <el-col :span=\"16\">\n              <el-input\n                v-model=\"planInfo.sale\"\n                placeholder=\"请输入电影售价\"\n              ></el-input>\n            </el-col>\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"cancel\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"managePlanInfo\">确 定</el-button>\n        </div>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    // 售价自定义校验规则\n    let checkPrice = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(\"售价不能为空\"));\n      } else {\n        if (/^(0(?!\\.00)|[1-9]\\d{0,6})\\.\\d{2}$/.test(value)) {\n          callback();\n        } else {\n          callback(new Error(\"请输入正确格式的售价\"));\n        }\n      }\n    };\n    return {\n      // 对话框显示标题\n      dialogTitle: \"\",\n      // 对话框显示状态\n      dialogFormVisible: false,\n      // 添加或编辑排片信息\n      planInfo: {\n        name: \"\",\n        movieId: \"\",\n        cinema: \"\",\n        hall: \"\",\n        inDate: \"\",\n        outDate: \"\",\n        outTime: \"\",\n        leaveTime: \"\",\n        sale: \"\",\n      },\n      // 排片列表数据\n      planList: [],\n      // 影院列表数据\n      cinemaList: [],\n      // 电影列表数据\n      movieList: [],\n      // 影厅列表数据\n      hallList: [],\n      // 放映时间选项\n      outTimeOptions: [\n        { label: \"08:05\", value: \"08:05\" },\n        { label: \"12:05\", value: \"12:05\" },\n        { label: \"16:05\", value: \"16:05\" },\n        { label: \"20:05\", value: \"20:05\" },\n      ],\n      // 散场时间选项\n      leaveTimeOptions: [\n        { label: \"11:05\", value: \"11:05\" },\n        { label: \"12:05\", value: \"12:05\" },\n        { label: \"15:05\", value: \"15:05\" },\n        { label: \"16:05\", value: \"16:05\" },\n        { label: \"23:05\", value: \"23:05\" },\n        { label: \"00:05\", value: \"00:05\" },\n      ],\n      // 放映日期设置时间只能往后选，之前的禁用\n      datePickerOptions: {\n        disabledDate: this.disabledDate,\n      },\n      // 表单验证规则\n      planInfoFormrules: {\n        name: [\n          { required: true, message: \"电影名不能为空\", trigger: \"change\" },\n        ],\n        cinema: [\n          { required: true, message: \"影院名不能为空\", trigger: \"change\" },\n        ],\n        hall: [\n          { required: true, message: \"影厅名不能为空\", trigger: \"change\" },\n        ],\n        outDate: [\n          { required: true, message: \"放映日期不能为空\", trigger: \"change\" },\n        ],\n        outTime: [\n          { required: true, message: \"放映时间不能为空\", trigger: \"change\" },\n        ],\n        sale: [{ required: true, validator: checkPrice, trigger: \"blur\" }],\n      },\n      // 分页器样式\n      queryInfo: {\n        // 每页显示的条数\n        pageSize: 7,\n        // 当前页数\n        currentPage: 1,\n        // 总页数\n        total: 0,\n      },\n      // 搜索框内容\n      searchContent: \"\",\n    };\n  },\n  methods: {\n    //限制可选日期\n    disabledDate(time) {\n      let curDate = new Date().getTime();\n      const two = 2 * 24 * 60 * 60 * 1000;\n      const twoDays = curDate + two;\n      return time.getTime() < Date.now() || time.getTime() > twoDays; //小于当前的禁止，大于2天前的禁止\n    },\n    // 获取影院列表\n    async getCinemaList() {\n      const { data } = await this.$http.get(\"/rest/cinemas\");\n      this.cinemaList = data.allData;\n      // console.log(\"影院列表\", this.cinemaList);\n    },\n    // 获取电影列表\n    async getMovieList() {\n      const { data } = await this.$http.get(\"/rest/movies\");\n      this.movieList = data.allData;\n      // console.log(\"电影列表数据\", this.movieList);\n    },\n    // 获取选中的电影数据，从而取出对应电影上映时间数据\n    async getInDateData(val) {\n      // console.log(val);\n      // 选中按钮点击清除按钮时，val为空\n      if (!val) {\n        return (this.planInfo.inDate = \"\");\n      }\n      const data = this.movieList.filter((item) => item.name == val);\n      // console.log(data);\n      this.planInfo.inDate = data[0].time;\n      this.planInfo.movieId = data[0]._id;\n    },\n    // 获取选中的影院数据，从而取出影厅数据\n    async getHallList(val) {\n      if (!val) {\n        // 在点击清空的时候，val为空，清空数据\n        this.planInfo.hall = \"\";\n        this.hallList = [];\n      } else {\n        const data = this.cinemaList.filter((item) => item._id == val);\n        this.hallList = data[0].children;\n      }\n    },\n    // 获取排片列表\n    async getPlanList() {\n      let res;\n      if (!this.searchContent) {\n        // 如果搜索框内容为空\n        const { data } = await this.$http.get(\"/rest/plans\", {\n          params: {\n            ...this.queryInfo,\n          },\n        });\n        res = data;\n        // console.log(res);\n      } else {\n        // 如果搜索框内容不为空\n        const { data } = await this.$http.get(\n          `/rest/plans/${this.searchContent}`,\n          {\n            params: {\n              ...this.queryInfo,\n            },\n          }\n        );\n        res = data;\n        // console.log(res);\n      }\n      // console.log(res);\n      if (res.data) {\n        this.planList = JSON.parse(JSON.stringify(res.data));\n      }\n      if (res.total) {\n        this.queryInfo.total = JSON.parse(JSON.stringify(res.total));\n      }\n      console.log(\"排片列表数据\", this.planList);\n    },\n    // 添加排片\n    addPlan() {\n      // 清空排片列表\n      this.planInfo = {};\n      this.dialogTitle = \"添加排片\";\n      this.dialogFormVisible = true;\n    },\n    // 确定对话框\n    managePlanInfo() {\n      this.$refs.planInfoForm.validate(async (valid) => {\n        // 表单验证不通过\n        if (!valid) {\n          return this.$message.error(\"请合法输入必填信息\");\n        }\n        // 表单验证通过,发送网络请求,先判断时添加排片还是编辑排片\n        let data;\n\n        if (this.dialogTitle === \"添加排片\") {\n          data = await this.$http.post(\"/rest/plans\", this.planInfo);\n        } else {\n          data = await this.$http.put(\n            `/rest/plans/${this.planInfo._id}`,\n            this.planInfo\n          );\n        }\n        // 后端数据验证不通过\n        if (!data.data.status) {\n          return this.$message({\n            message: data.data.message,\n            type: \"error\",\n          });\n        }\n        // 后端数据验证通过\n        if (this.dialogTitle === \"添加排片\") {\n          this.$message({\n            message: \"添加成功\",\n            type: \"success\",\n          });\n        }\n        if (this.dialogTitle === \"编辑排片\") {\n          this.$message({\n            message: \"修改成功\",\n            type: \"success\",\n          });\n        }\n        this.getPlanList();\n        this.dialogFormVisible = false;\n        // 清空planInfo数据\n        this.planInfo = {};\n      });\n    },\n    // 取消对话框\n    cancel() {\n      // console.log(this.planInfo);\n      this.dialogFormVisible = false;\n      // 清空planInfo数据\n      this.planInfo = {};\n    },\n    // 编辑排片\n    handleEdit(row) {\n      this.dialogTitle = \"编辑排片\";\n      // 这里拿到的row直接赋值是浅拷贝，JSON赋值是深拷贝\n      // 如果浅拷贝，Bug：点击编辑出现对话框修改数据，点击取消列表数据会变\n      // 但其实并没发请求，刷新后又变回原样\n      this.planInfo = JSON.parse(JSON.stringify(row));\n      this.planInfo.cinema = this.planInfo.cinema._id;\n      // 这里因为影厅数据是从hallList里面取的，而hallList的数据是根据cinema选择器选中后触发getHallList函数取到值来决定，这里直接赋值不会触发该函数，所以要手动触发\n      this.getHallList(this.planInfo.cinema);\n      this.planInfo.hall = this.planInfo.hall._id;\n      this.planInfo.movieId = this.planInfo.movieId._id;\n      // console.log(this.planInfo);\n      this.dialogFormVisible = true;\n    },\n    // 撤销电影\n    async handleDelete(row) {\n      const confirmResult = await this.$confirm(\n        `是否确定要撤销电影:${row.name}?`,\n        \"提示\",\n        {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\",\n          center: true,\n        }\n      ).catch((err) => err);\n      if (confirmResult === \"confirm\") {\n        // 删除成功，发送删除数据请求\n        const data = await this.$http.delete(`/rest/plans/${row._id}`);\n        // 删除后，更新列表\n        this.getPlanList();\n        this.$message({\n          type: \"success\",\n          message: \"删除成功\",\n        });\n      } else {\n        this.$message({\n          type: \"info\",\n          message: \"已取消删除\",\n        });\n      }\n    },\n    // 分页器当前页面变动时触发\n    handleCurrentChange(val) {\n      this.queryInfo.currentPage = val;\n      this.getPlanList();\n    },\n    // 搜索框搜索\n    async handleSearch() {\n      this.getPlanList();\n    },\n  },\n  created() {\n    // 获取排片列表\n    this.getPlanList();\n    // 获取影院列表\n    this.getCinemaList();\n    // 获取电影列表\n    this.getMovieList();\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.top {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 0;\n  margin-bottom: 20px;\n}\n// 海报图片样式\n.avatar-uploader-icon {\n  width: 276px;\n  height: 92px;\n  line-height: 92px;\n}\n.avatar {\n  width: 276px;\n  height: 92px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}