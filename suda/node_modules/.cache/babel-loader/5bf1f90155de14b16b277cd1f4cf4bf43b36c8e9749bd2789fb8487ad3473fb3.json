{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst net = require('net'),\n  tls = require('tls'),\n  fs = require('fs'),\n  dgram = require('dgram'),\n  EventParser = require('../entities/EventParser.js'),\n  Message = require('js-message'),\n  Events = require('event-pubsub');\nlet eventParser = new EventParser();\nclass Server extends Events {\n  constructor(path, config, log, port) {\n    super();\n    Object.assign(this, {\n      config: config,\n      path: path,\n      port: port,\n      udp4: false,\n      udp6: false,\n      log: log,\n      server: false,\n      sockets: [],\n      emit: emit,\n      broadcast: broadcast\n    });\n    eventParser = new EventParser(this.config);\n    this.on('close', serverClosed.bind(this));\n  }\n  onStart(socket) {\n    this.trigger('start', socket);\n  }\n  stop() {\n    this.server.close();\n  }\n  start() {\n    if (!this.path) {\n      this.log('Socket Server Path not specified, refusing to start');\n      return;\n    }\n    if (this.config.unlink) {\n      fs.unlink(this.path, startServer.bind(this));\n    } else {\n      startServer.bind(this)();\n    }\n  }\n}\nfunction emit(socket, type, data) {\n  this.log('dispatching event to socket', ' : ', type, data);\n  let message = new Message();\n  message.type = type;\n  message.data = data;\n  if (this.config.rawBuffer) {\n    this.log(this.config.encoding);\n    message = Buffer.from(type, this.config.encoding);\n  } else {\n    message = eventParser.format(message);\n  }\n  if (this.udp4 || this.udp6) {\n    if (!socket.address || !socket.port) {\n      this.log('Attempting to emit to a single UDP socket without supplying socket address or port. Redispatching event as broadcast to all connected sockets');\n      this.broadcast(type, data);\n      return;\n    }\n    this.server.write(message, socket);\n    return;\n  }\n  socket.write(message);\n}\nfunction broadcast(type, data) {\n  this.log('broadcasting event to all known sockets listening to ', this.path, ' : ', this.port ? this.port : '', type, data);\n  let message = new Message();\n  message.type = type;\n  message.data = data;\n  if (this.config.rawBuffer) {\n    message = Buffer.from(type, this.config.encoding);\n  } else {\n    message = eventParser.format(message);\n  }\n  if (this.udp4 || this.udp6) {\n    for (let i = 1, count = this.sockets.length; i < count; i++) {\n      this.server.write(message, this.sockets[i]);\n    }\n  } else {\n    for (let i = 0, count = this.sockets.length; i < count; i++) {\n      this.sockets[i].write(message);\n    }\n  }\n}\nfunction serverClosed() {\n  for (let i = 0, count = this.sockets.length; i < count; i++) {\n    let socket = this.sockets[i];\n    let destroyedSocketId = false;\n    if (socket) {\n      if (socket.readable) {\n        continue;\n      }\n    }\n    if (socket.id) {\n      destroyedSocketId = socket.id;\n    }\n    this.log('socket disconnected', destroyedSocketId.toString());\n    if (socket && socket.destroy) {\n      socket.destroy();\n    }\n    this.sockets.splice(i, 1);\n    this.publish('socket.disconnected', socket, destroyedSocketId);\n    return;\n  }\n}\nfunction gotData(socket, data, UDPSocket) {\n  let sock = this.udp4 || this.udp6 ? UDPSocket : socket;\n  if (this.config.rawBuffer) {\n    data = Buffer.from(data, this.config.encoding);\n    this.publish('data', data, sock);\n    return;\n  }\n  if (!sock.ipcBuffer) {\n    sock.ipcBuffer = '';\n  }\n  data = sock.ipcBuffer += data;\n  if (data.slice(-1) != eventParser.delimiter || data.indexOf(eventParser.delimiter) == -1) {\n    this.log('Messages are large, You may want to consider smaller messages.');\n    return;\n  }\n  sock.ipcBuffer = '';\n  data = eventParser.parse(data);\n  while (data.length > 0) {\n    let message = new Message();\n    message.load(data.shift());\n\n    // Only set the sock id if it is specified.\n    if (message.data && message.data.id) {\n      sock.id = message.data.id;\n    }\n    this.log('received event of : ', message.type, message.data);\n    this.publish(message.type, message.data, sock);\n  }\n}\nfunction socketClosed(socket) {\n  this.publish('close', socket);\n}\nfunction serverCreated(socket) {\n  this.sockets.push(socket);\n  if (socket.setEncoding) {\n    socket.setEncoding(this.config.encoding);\n  }\n  this.log('## socket connection to server detected ##');\n  socket.on('close', socketClosed.bind(this));\n  socket.on('error', function (err) {\n    this.log('server socket error', err);\n    this.publish('error', err);\n  }.bind(this));\n  socket.on('data', gotData.bind(this, socket));\n  socket.on('message', function (msg, rinfo) {\n    if (!rinfo) {\n      return;\n    }\n    this.log('Received UDP message from ', rinfo.address, rinfo.port);\n    let data;\n    if (this.config.rawSocket) {\n      data = Buffer.from(msg, this.config.encoding);\n    } else {\n      data = msg.toString();\n    }\n    socket.emit('data', data, rinfo);\n  }.bind(this));\n  this.publish('connect', socket);\n  if (this.config.rawBuffer) {\n    return;\n  }\n}\nfunction startServer() {\n  this.log('starting server on ', this.path, this.port ? `:${this.port}` : '');\n  if (!this.udp4 && !this.udp6) {\n    this.log('starting TLS server', this.config.tls);\n    if (!this.config.tls) {\n      this.server = net.createServer(serverCreated.bind(this));\n    } else {\n      startTLSServer.bind(this)();\n    }\n  } else {\n    this.server = dgram.createSocket(this.udp4 ? 'udp4' : 'udp6');\n    this.server.write = UDPWrite.bind(this);\n    this.server.on('listening', function UDPServerStarted() {\n      serverCreated.bind(this)(this.server);\n    }.bind(this));\n  }\n  this.server.on('error', function (err) {\n    this.log('server error', err);\n    this.publish('error', err);\n  }.bind(this));\n  this.server.maxConnections = this.config.maxConnections;\n  if (!this.port) {\n    this.log('starting server as', 'Unix || Windows Socket');\n    if (process.platform === 'win32') {\n      this.path = this.path.replace(/^\\//, '');\n      this.path = this.path.replace(/\\//g, '-');\n      this.path = `\\\\\\\\.\\\\pipe\\\\${this.path}`;\n    }\n    this.server.listen({\n      path: this.path,\n      readableAll: this.config.readableAll,\n      writableAll: this.config.writableAll\n    }, this.onStart.bind(this));\n    return;\n  }\n  if (!this.udp4 && !this.udp6) {\n    this.log('starting server as', this.config.tls ? 'TLS' : 'TCP');\n    this.server.listen(this.port, this.path, this.onStart.bind(this));\n    return;\n  }\n  this.log('starting server as', this.udp4 ? 'udp4' : 'udp6');\n  this.server.bind(this.port, this.path);\n  this.onStart({\n    address: this.path,\n    port: this.port\n  });\n}\nfunction startTLSServer() {\n  this.log('starting TLS server', this.config.tls);\n  if (this.config.tls.private) {\n    this.config.tls.key = fs.readFileSync(this.config.tls.private);\n  } else {\n    this.config.tls.key = fs.readFileSync(`${__dirname}/../local-node-ipc-certs/private/server.key`);\n  }\n  if (this.config.tls.public) {\n    this.config.tls.cert = fs.readFileSync(this.config.tls.public);\n  } else {\n    this.config.tls.cert = fs.readFileSync(`${__dirname}/../local-node-ipc-certs/server.pub`);\n  }\n  if (this.config.tls.dhparam) {\n    this.config.tls.dhparam = fs.readFileSync(this.config.tls.dhparam);\n  }\n  if (this.config.tls.trustedConnections) {\n    if (typeof this.config.tls.trustedConnections === 'string') {\n      this.config.tls.trustedConnections = [this.config.tls.trustedConnections];\n    }\n    this.config.tls.ca = [];\n    for (let i = 0; i < this.config.tls.trustedConnections.length; i++) {\n      this.config.tls.ca.push(fs.readFileSync(this.config.tls.trustedConnections[i]));\n    }\n  }\n  this.server = tls.createServer(this.config.tls, serverCreated.bind(this));\n}\nfunction UDPWrite(message, socket) {\n  let data = Buffer.from(message, this.config.encoding);\n  this.server.send(data, 0, data.length, socket.port, socket.address, function (err, bytes) {\n    if (err) {\n      this.log('error writing data to socket', err);\n      this.publish('error', function (err) {\n        this.publish('error', err);\n      });\n    }\n  });\n}\nmodule.exports = Server;","map":{"version":3,"names":["net","require","tls","fs","dgram","EventParser","Message","Events","eventParser","Server","constructor","path","config","log","port","Object","assign","udp4","udp6","server","sockets","emit","broadcast","on","serverClosed","bind","onStart","socket","trigger","stop","close","start","unlink","startServer","type","data","message","rawBuffer","encoding","Buffer","from","format","address","write","i","count","length","destroyedSocketId","readable","id","toString","destroy","splice","publish","gotData","UDPSocket","sock","ipcBuffer","slice","delimiter","indexOf","parse","load","shift","socketClosed","serverCreated","push","setEncoding","err","msg","rinfo","rawSocket","createServer","startTLSServer","createSocket","UDPWrite","UDPServerStarted","maxConnections","process","platform","replace","listen","readableAll","writableAll","private","key","readFileSync","__dirname","public","cert","dhparam","trustedConnections","ca","send","bytes","module","exports"],"sources":["D:/WebSpace/SuDaMovie/suda/node_modules/@achrinza/node-ipc/dao/socketServer.js"],"sourcesContent":["'use strict';\n\nconst net = require('net'),\n    tls = require('tls'),\n    fs = require('fs'),\n    dgram = require('dgram'),\n    EventParser = require('../entities/EventParser.js'),\n    Message = require('js-message'),\n    Events = require('event-pubsub');\n\nlet eventParser = new EventParser();\n\nclass Server extends Events{\n    constructor(path,config,log,port){\n        super();\n        Object.assign(\n            this,\n            {\n                config          : config,\n                path            : path,\n                port            : port,\n                udp4            : false,\n                udp6            : false,\n                log             : log,\n                server          : false,\n                sockets         : [],\n                emit            : emit,\n                broadcast       : broadcast\n            }\n        );\n\n        eventParser=new EventParser(this.config);\n\n        this.on(\n            'close',\n            serverClosed.bind(this)\n        );\n    }\n\n    onStart(socket){\n        this.trigger(\n            'start',\n            socket\n        );\n    }\n\n    stop(){\n        this.server.close();\n    }\n\n    start(){\n        if(!this.path){\n            this.log('Socket Server Path not specified, refusing to start');\n            return;\n        }\n\n        if(this.config.unlink){\n            fs.unlink(\n                this.path,\n                startServer.bind(this)\n            );\n        }else{\n            startServer.bind(this)();\n        }\n    }\n}\n\nfunction emit(socket, type, data){\n    this.log('dispatching event to socket', ' : ', type, data);\n\n    let message=new Message;\n    message.type=type;\n    message.data=data;\n\n    if(this.config.rawBuffer){\n        this.log(this.config.encoding)\n        message=Buffer.from(type,this.config.encoding);\n    }else{\n        message=eventParser.format(message);\n    }\n\n    if(this.udp4 || this.udp6){\n\n        if(!socket.address || !socket.port){\n            this.log('Attempting to emit to a single UDP socket without supplying socket address or port. Redispatching event as broadcast to all connected sockets');\n            this.broadcast(type,data);\n            return;\n        }\n\n        this.server.write(\n            message,\n            socket\n        );\n        return;\n    }\n\n    socket.write(message);\n}\n\nfunction broadcast(type,data){\n    this.log('broadcasting event to all known sockets listening to ', this.path,' : ', ((this.port)?this.port:''), type, data);\n    let message=new Message;\n    message.type=type;\n    message.data=data;\n\n    if(this.config.rawBuffer){\n        message=Buffer.from(type,this.config.encoding);\n    }else{\n        message=eventParser.format(message);\n    }\n\n    if(this.udp4 || this.udp6){\n        for(let i=1, count=this.sockets.length; i<count; i++){\n            this.server.write(message,this.sockets[i]);\n        }\n    }else{\n        for(let i=0, count=this.sockets.length; i<count; i++){\n            this.sockets[i].write(message);\n        }\n    }\n}\n\nfunction serverClosed(){\n    for(let i=0, count=this.sockets.length; i<count; i++){\n        let socket=this.sockets[i];\n        let destroyedSocketId=false;\n\n        if(socket){\n            if(socket.readable){\n                continue;\n            }\n        }\n\n        if(socket.id){\n            destroyedSocketId=socket.id;\n        }\n\n        this.log('socket disconnected',destroyedSocketId.toString());\n\n        if(socket && socket.destroy){\n            socket.destroy();\n        }\n\n        this.sockets.splice(i,1);\n\n        this.publish('socket.disconnected', socket, destroyedSocketId);\n\n        return;\n    }\n}\n\nfunction gotData(socket,data,UDPSocket){\n    let sock=((this.udp4 || this.udp6)? UDPSocket : socket);\n    if(this.config.rawBuffer){\n        data=Buffer.from(data,this.config.encoding);\n        this.publish(\n            'data',\n            data,\n            sock\n        );\n        return;\n    }\n\n    if(!sock.ipcBuffer){\n        sock.ipcBuffer='';\n    }\n\n    data=(sock.ipcBuffer+=data);\n\n    if(data.slice(-1)!=eventParser.delimiter || data.indexOf(eventParser.delimiter) == -1){\n        this.log('Messages are large, You may want to consider smaller messages.');\n        return;\n    }\n\n    sock.ipcBuffer='';\n\n    data=eventParser.parse(data);\n\n    while(data.length>0){\n        let message=new Message;\n        message.load(data.shift());\n\n        // Only set the sock id if it is specified.\n        if (message.data && message.data.id){\n            sock.id=message.data.id;\n        }\n\n        this.log('received event of : ',message.type,message.data);\n\n        this.publish(\n            message.type,\n            message.data,\n            sock\n        );\n    }\n}\n\nfunction socketClosed(socket){\n    this.publish(\n        'close',\n        socket\n    );\n}\n\nfunction serverCreated(socket) {\n    this.sockets.push(socket);\n\n    if(socket.setEncoding){\n        socket.setEncoding(this.config.encoding);\n    }\n\n    this.log('## socket connection to server detected ##');\n    socket.on(\n        'close',\n        socketClosed.bind(this)\n    );\n\n    socket.on(\n        'error',\n        function(err){\n            this.log('server socket error',err);\n\n            this.publish('error',err);\n        }.bind(this)\n    );\n\n    socket.on(\n        'data',\n        gotData.bind(this,socket)\n    );\n\n    socket.on(\n        'message',\n        function(msg,rinfo) {\n            if (!rinfo){\n                return;\n            }\n\n            this.log('Received UDP message from ', rinfo.address, rinfo.port);\n            let data;\n\n            if(this.config.rawSocket){\n                data=Buffer.from(msg,this.config.encoding);\n            }else{\n                data=msg.toString();\n            }\n            socket.emit('data',data,rinfo);\n        }.bind(this)\n    );\n\n    this.publish(\n        'connect',\n        socket\n    );\n\n    if(this.config.rawBuffer){\n        return;\n    }\n}\n\nfunction startServer() {\n    this.log(\n        'starting server on ',this.path,\n        ((this.port)?`:${this.port}`:'')\n    );\n\n    if(!this.udp4 && !this.udp6){\n        this.log('starting TLS server',this.config.tls);\n        if(!this.config.tls){\n            this.server=net.createServer(\n                serverCreated.bind(this)\n            );\n        }else{\n            startTLSServer.bind(this)();\n        }\n    }else{\n        this.server=dgram.createSocket(\n            ((this.udp4)? 'udp4':'udp6')\n        );\n        this.server.write=UDPWrite.bind(this);\n        this.server.on(\n            'listening',\n            function UDPServerStarted() {\n                serverCreated.bind(this)(this.server);\n            }.bind(this)\n        );\n    }\n\n    this.server.on(\n        'error',\n        function(err){\n            this.log('server error',err);\n\n            this.publish(\n                'error',\n                err\n            );\n        }.bind(this)\n    );\n\n    this.server.maxConnections=this.config.maxConnections;\n\n    if(!this.port){\n        this.log('starting server as', 'Unix || Windows Socket');\n        if (process.platform ==='win32'){\n            this.path = this.path.replace(/^\\//, '');\n            this.path = this.path.replace(/\\//g, '-');\n            this.path= `\\\\\\\\.\\\\pipe\\\\${this.path}`;\n        }\n\n        this.server.listen({\n            path: this.path,\n            readableAll: this.config.readableAll,\n            writableAll: this.config.writableAll\n        }, this.onStart.bind(this));\n\n        return;\n    }\n\n    if(!this.udp4 && !this.udp6){\n        this.log('starting server as', (this.config.tls?'TLS':'TCP'));\n        this.server.listen(\n            this.port,\n            this.path,\n            this.onStart.bind(this)\n        );\n        return;\n    }\n\n    this.log('starting server as',((this.udp4)? 'udp4':'udp6'));\n\n    this.server.bind(\n        this.port,\n        this.path\n    );\n\n    this.onStart(\n        {\n            address : this.path,\n            port    : this.port\n        }\n    );\n}\n\nfunction startTLSServer(){\n    this.log('starting TLS server',this.config.tls);\n    if(this.config.tls.private){\n        this.config.tls.key=fs.readFileSync(this.config.tls.private);\n    }else{\n        this.config.tls.key=fs.readFileSync(`${__dirname}/../local-node-ipc-certs/private/server.key`);\n    }\n    if(this.config.tls.public){\n        this.config.tls.cert=fs.readFileSync(this.config.tls.public);\n    }else{\n        this.config.tls.cert=fs.readFileSync(`${__dirname}/../local-node-ipc-certs/server.pub`);\n    }\n    if(this.config.tls.dhparam){\n        this.config.tls.dhparam=fs.readFileSync(this.config.tls.dhparam);\n    }\n    if(this.config.tls.trustedConnections){\n        if(typeof this.config.tls.trustedConnections === 'string'){\n            this.config.tls.trustedConnections=[this.config.tls.trustedConnections];\n        }\n        this.config.tls.ca=[];\n        for(let i=0; i<this.config.tls.trustedConnections.length; i++){\n            this.config.tls.ca.push(\n                fs.readFileSync(this.config.tls.trustedConnections[i])\n            );\n        }\n    }\n    this.server=tls.createServer(\n        this.config.tls,\n        serverCreated.bind(this)\n    );\n}\n\nfunction UDPWrite(message,socket){\n    let data=Buffer.from(message, this.config.encoding);\n    this.server.send(\n        data,\n        0,\n        data.length,\n        socket.port,\n        socket.address,\n        function(err, bytes) {\n            if(err){\n                this.log('error writing data to socket',err);\n                this.publish(\n                    'error',\n                    function(err){\n                        this.publish('error',err);\n                    }\n                );\n            }\n        }\n    );\n}\n\nmodule.exports=Server;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}