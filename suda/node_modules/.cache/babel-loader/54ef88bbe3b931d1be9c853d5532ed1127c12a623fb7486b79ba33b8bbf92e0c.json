{"ast":null,"code":"'use strict';\n\nconst Defaults = require('../entities/Defaults.js'),\n  Client = require('../dao/client.js'),\n  Server = require('../dao/socketServer.js'),\n  util = require('util');\nclass IPC {\n  constructor() {\n    Object.defineProperties(this, {\n      config: {\n        enumerable: true,\n        writable: true,\n        value: new Defaults()\n      },\n      connectTo: {\n        enumerable: true,\n        writable: false,\n        value: connect\n      },\n      connectToNet: {\n        enumerable: true,\n        writable: false,\n        value: connectNet\n      },\n      disconnect: {\n        enumerable: true,\n        writable: false,\n        value: disconnect\n      },\n      serve: {\n        enumerable: true,\n        writable: false,\n        value: serve\n      },\n      serveNet: {\n        enumerable: true,\n        writable: false,\n        value: serveNet\n      },\n      of: {\n        enumerable: true,\n        writable: true,\n        value: {}\n      },\n      server: {\n        enumerable: true,\n        writable: true,\n        configurable: true,\n        value: false\n      },\n      log: {\n        enumerable: true,\n        writable: false,\n        value: log\n      }\n    });\n  }\n}\nfunction log(...args) {\n  if (this.config.silent) {\n    return;\n  }\n  for (let i = 0, count = args.length; i < count; i++) {\n    if (typeof args[i] != 'object') {\n      continue;\n    }\n    args[i] = util.inspect(args[i], {\n      depth: this.config.logDepth,\n      colors: this.config.logInColor\n    });\n  }\n  this.config.logger(args.join(' '));\n}\nfunction disconnect(id) {\n  if (!this.of[id]) {\n    return;\n  }\n  this.of[id].explicitlyDisconnected = true;\n  this.of[id].off('*', '*');\n  if (this.of[id].socket) {\n    if (this.of[id].socket.destroy) {\n      this.of[id].socket.destroy();\n    }\n  }\n  delete this.of[id];\n}\nfunction serve(path, callback) {\n  if (typeof path == 'function') {\n    callback = path;\n    path = false;\n  }\n  if (!path) {\n    this.log('Server path not specified, so defaulting to', 'ipc.config.socketRoot + ipc.config.appspace + ipc.config.id', this.config.socketRoot + this.config.appspace + this.config.id);\n    path = this.config.socketRoot + this.config.appspace + this.config.id;\n  }\n  if (!callback) {\n    callback = emptyCallback;\n  }\n  this.server = new Server(path, this.config, log);\n  this.server.on('start', callback);\n}\nfunction emptyCallback() {\n  //Do Nothing\n}\nfunction serveNet(host, port, UDPType, callback) {\n  if (typeof host == 'number') {\n    callback = UDPType;\n    UDPType = port;\n    port = host;\n    host = false;\n  }\n  if (typeof host == 'function') {\n    callback = host;\n    UDPType = false;\n    host = false;\n    port = false;\n  }\n  if (!host) {\n    this.log('Server host not specified, so defaulting to', 'ipc.config.networkHost', this.config.networkHost);\n    host = this.config.networkHost;\n  }\n  if (host.toLowerCase() == 'udp4' || host.toLowerCase() == 'udp6') {\n    callback = port;\n    UDPType = host.toLowerCase();\n    port = false;\n    host = this.config.networkHost;\n  }\n  if (typeof port == 'string') {\n    callback = UDPType;\n    UDPType = port;\n    port = false;\n  }\n  if (typeof port == 'function') {\n    callback = port;\n    UDPType = false;\n    port = false;\n  }\n  if (!port) {\n    this.log('Server port not specified, so defaulting to', 'ipc.config.networkPort', this.config.networkPort);\n    port = this.config.networkPort;\n  }\n  if (typeof UDPType == 'function') {\n    callback = UDPType;\n    UDPType = false;\n  }\n  if (!callback) {\n    callback = emptyCallback;\n  }\n  this.server = new Server(host, this.config, log, port);\n  if (UDPType) {\n    this.server[UDPType] = true;\n    if (UDPType === \"udp4\" && host === \"::1\") {\n      // bind udp4 socket to an ipv4 address\n      this.server.path = \"127.0.0.1\";\n    }\n  }\n  this.server.on('start', callback);\n}\nfunction connect(id, path, callback) {\n  if (typeof path == 'function') {\n    callback = path;\n    path = false;\n  }\n  if (!callback) {\n    callback = emptyCallback;\n  }\n  if (!id) {\n    this.log('Service id required', 'Requested service connection without specifying service id. Aborting connection attempt');\n    return;\n  }\n  if (!path) {\n    this.log('Service path not specified, so defaulting to', 'ipc.config.socketRoot + ipc.config.appspace + id', (this.config.socketRoot + this.config.appspace + id).data);\n    path = this.config.socketRoot + this.config.appspace + id;\n  }\n  if (this.of[id]) {\n    if (!this.of[id].socket.destroyed) {\n      this.log('Already Connected to', id, '- So executing success without connection');\n      callback();\n      return;\n    }\n    this.of[id].socket.destroy();\n  }\n  this.of[id] = new Client(this.config, this.log);\n  this.of[id].id = id;\n  this.of[id].path = path;\n  this.of[id].connect();\n  callback(this);\n}\nfunction connectNet(id, host, port, callback) {\n  if (!id) {\n    this.log('Service id required', 'Requested service connection without specifying service id. Aborting connection attempt');\n    return;\n  }\n  if (typeof host == 'number') {\n    callback = port;\n    port = host;\n    host = false;\n  }\n  if (typeof host == 'function') {\n    callback = host;\n    host = false;\n    port = false;\n  }\n  if (!host) {\n    this.log('Server host not specified, so defaulting to', 'ipc.config.networkHost', this.config.networkHost);\n    host = this.config.networkHost;\n  }\n  if (typeof port == 'function') {\n    callback = port;\n    port = false;\n  }\n  if (!port) {\n    this.log('Server port not specified, so defaulting to', 'ipc.config.networkPort', this.config.networkPort);\n    port = this.config.networkPort;\n  }\n  if (typeof callback == 'string') {\n    UDPType = callback;\n    callback = false;\n  }\n  if (!callback) {\n    callback = emptyCallback;\n  }\n  if (this.of[id]) {\n    if (!this.of[id].socket.destroyed) {\n      this.log('Already Connected to', id, '- So executing success without connection');\n      callback();\n      return;\n    }\n    this.of[id].socket.destroy();\n  }\n  this.of[id] = new Client(this.config, this.log);\n  this.of[id].id = id;\n  this.of[id].socket ? this.of[id].socket.id = id : null;\n  this.of[id].path = host;\n  this.of[id].port = port;\n  this.of[id].connect();\n  callback(this);\n}\nmodule.exports = IPC;","map":{"version":3,"names":["Defaults","require","Client","Server","util","IPC","constructor","Object","defineProperties","config","enumerable","writable","value","connectTo","connect","connectToNet","connectNet","disconnect","serve","serveNet","of","server","configurable","log","args","silent","i","count","length","inspect","depth","logDepth","colors","logInColor","logger","join","id","explicitlyDisconnected","off","socket","destroy","path","callback","socketRoot","appspace","emptyCallback","on","host","port","UDPType","networkHost","toLowerCase","networkPort","data","destroyed","module","exports"],"sources":["D:/WebSpace/SuDaMovie/suda/node_modules/@achrinza/node-ipc/services/IPC.js"],"sourcesContent":["'use strict';\n\nconst Defaults = require('../entities/Defaults.js'),\n    Client = require('../dao/client.js'),\n    Server = require('../dao/socketServer.js'),\n    util = require('util');\n\nclass IPC{\n    constructor(){\n        Object.defineProperties(\n            this,\n            {\n                config      : {\n                    enumerable:true,\n                    writable:true,\n                    value:new Defaults\n                },\n                connectTo   : {\n                    enumerable:true,\n                    writable:false,\n                    value:connect\n                },\n                connectToNet: {\n                    enumerable:true,\n                    writable:false,\n                    value:connectNet\n                },\n                disconnect  : {\n                    enumerable:true,\n                    writable:false,\n                    value:disconnect\n                },\n                serve       : {\n                    enumerable:true,\n                    writable:false,\n                    value:serve\n                },\n                serveNet    : {\n                    enumerable:true,\n                    writable:false,\n                    value:serveNet\n                },\n                of          : {\n                    enumerable:true,\n                    writable:true,\n                    value:{}\n                },\n                server      : {\n                    enumerable:true,\n                    writable:true,\n                    configurable:true,\n                    value:false\n                },\n                log         : {\n                    enumerable:true,\n                    writable:false,\n                    value:log\n                }\n            }\n        );\n    }\n}\n\nfunction log(...args){\n    if(this.config.silent){\n        return;\n    }\n\n    for(let i=0, count=args.length; i<count; i++){\n        if(typeof args[i] != 'object'){\n            continue;\n        }\n\n        args[i]=util.inspect(\n            args[i],\n            {\n                depth:this.config.logDepth,\n                colors:this.config.logInColor\n            }\n        );\n    }\n\n    this.config.logger(\n        args.join(' ')\n    );\n}\n\nfunction disconnect(id){\n    if(!this.of[id]){\n        return;\n    }\n\n    this.of[id].explicitlyDisconnected=true;\n\n    this.of[id].off('*','*');\n    if(this.of[id].socket){\n        if(this.of[id].socket.destroy){\n            this.of[id].socket.destroy();\n        }\n    }\n\n    delete this.of[id];\n}\n\nfunction serve(path,callback){\n    if(typeof path=='function'){\n        callback=path;\n        path=false;\n    }\n    if(!path){\n        this.log(\n            'Server path not specified, so defaulting to',\n            'ipc.config.socketRoot + ipc.config.appspace + ipc.config.id',\n            this.config.socketRoot+this.config.appspace+this.config.id\n        );\n        path=this.config.socketRoot+this.config.appspace+this.config.id;\n    }\n\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    this.server=new Server(\n        path,\n        this.config,\n        log\n    );\n\n    this.server.on(\n        'start',\n        callback\n    );\n}\n\nfunction emptyCallback(){\n    //Do Nothing\n}\n\nfunction serveNet(host,port,UDPType,callback){\n    if(typeof host=='number'){\n        callback=UDPType;\n        UDPType=port;\n        port=host;\n        host=false;\n    }\n    if(typeof host=='function'){\n        callback=host;\n        UDPType=false;\n        host=false;\n        port=false;\n    }\n    if(!host){\n        this.log(\n            'Server host not specified, so defaulting to',\n            'ipc.config.networkHost',\n            this.config.networkHost\n        );\n        host=this.config.networkHost;\n    }\n    if(host.toLowerCase()=='udp4' || host.toLowerCase()=='udp6'){\n        callback=port;\n        UDPType=host.toLowerCase();\n        port=false;\n        host=this.config.networkHost;\n    }\n\n    if(typeof port=='string'){\n        callback=UDPType;\n        UDPType=port;\n        port=false;\n    }\n    if(typeof port=='function'){\n        callback=port;\n        UDPType=false;\n        port=false;\n    }\n    if(!port){\n        this.log(\n            'Server port not specified, so defaulting to',\n            'ipc.config.networkPort',\n            this.config.networkPort\n        );\n        port=this.config.networkPort;\n    }\n\n    if(typeof UDPType=='function'){\n        callback=UDPType;\n        UDPType=false;\n    }\n\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    this.server=new Server(\n        host,\n        this.config,\n        log,\n        port\n    );\n\n    if(UDPType){\n        this.server[UDPType]=true;\n        if(UDPType === \"udp4\" && host === \"::1\") {\n            // bind udp4 socket to an ipv4 address\n            this.server.path = \"127.0.0.1\";\n        }\n    }\n\n    this.server.on(\n        'start',\n        callback\n    );\n}\n\nfunction connect(id,path,callback){\n    if(typeof path == 'function'){\n        callback=path;\n        path=false;\n    }\n\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    if(!id){\n        this.log(\n            'Service id required',\n            'Requested service connection without specifying service id. Aborting connection attempt'\n        );\n        return;\n    }\n\n    if(!path){\n        this.log(\n            'Service path not specified, so defaulting to',\n            'ipc.config.socketRoot + ipc.config.appspace + id',\n            (this.config.socketRoot+this.config.appspace+id).data\n        );\n        path=this.config.socketRoot+this.config.appspace+id;\n    }\n\n    if(this.of[id]){\n        if(!this.of[id].socket.destroyed){\n            this.log(\n                'Already Connected to',\n                id,\n                '- So executing success without connection'\n            );\n            callback();\n            return;\n        }\n        this.of[id].socket.destroy();\n    }\n\n    this.of[id] = new Client(this.config,this.log);\n    this.of[id].id = id;\n    this.of[id].path = path;\n\n    this.of[id].connect();\n\n    callback(this);\n}\n\nfunction connectNet(id,host,port,callback){\n    if(!id){\n        this.log(\n            'Service id required',\n            'Requested service connection without specifying service id. Aborting connection attempt'\n        );\n        return;\n    }\n    if(typeof host=='number'){\n        callback=port;\n        port=host;\n        host=false;\n    }\n    if(typeof host=='function'){\n        callback=host;\n        host=false;\n        port=false;\n    }\n    if(!host){\n        this.log(\n            'Server host not specified, so defaulting to',\n            'ipc.config.networkHost',\n            this.config.networkHost\n        );\n        host=this.config.networkHost;\n    }\n\n    if(typeof port=='function'){\n        callback=port;\n        port=false;\n    }\n    if(!port){\n        this.log(\n            'Server port not specified, so defaulting to',\n            'ipc.config.networkPort',\n            this.config.networkPort\n        );\n        port=this.config.networkPort;\n    }\n\n    if(typeof callback == 'string'){\n        UDPType=callback;\n        callback=false;\n    }\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    if(this.of[id]){\n        if(!this.of[id].socket.destroyed){\n\n            this.log(\n                'Already Connected to',\n                id,\n                '- So executing success without connection'\n            );\n            callback();\n            return;\n        }\n        this.of[id].socket.destroy();\n    }\n\n    this.of[id] = new Client(this.config,this.log);\n    this.of[id].id = id;\n    (this.of[id].socket)? this.of[id].socket.id=id:null;\n    this.of[id].path = host;\n    this.of[id].port = port;\n\n    this.of[id].connect();\n\n    callback(this);\n}\n\nmodule.exports=IPC;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}