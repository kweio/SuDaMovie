{"ast":null,"code":"'use strict';\n\nconst alias = ['stdin', 'stdout', 'stderr'];\nconst hasAlias = opts => alias.some(x => Boolean(opts[x]));\nmodule.exports = opts => {\n  if (!opts) {\n    return null;\n  }\n  if (opts.stdio && hasAlias(opts)) {\n    throw new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${alias.map(x => `\\`${x}\\``).join(', ')}`);\n  }\n  if (typeof opts.stdio === 'string') {\n    return opts.stdio;\n  }\n  const stdio = opts.stdio || [];\n  if (!Array.isArray(stdio)) {\n    throw new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n  }\n  const result = [];\n  const len = Math.max(stdio.length, alias.length);\n  for (let i = 0; i < len; i++) {\n    let value = null;\n    if (stdio[i] !== undefined) {\n      value = stdio[i];\n    } else if (opts[alias[i]] !== undefined) {\n      value = opts[alias[i]];\n    }\n    result[i] = value;\n  }\n  return result;\n};","map":{"version":3,"names":["alias","hasAlias","opts","some","x","Boolean","module","exports","stdio","Error","map","join","Array","isArray","TypeError","result","len","Math","max","length","i","value","undefined"],"sources":["D:/WebSpace/SuDaMovie/suda/node_modules/execa/lib/stdio.js"],"sourcesContent":["'use strict';\nconst alias = ['stdin', 'stdout', 'stderr'];\n\nconst hasAlias = opts => alias.some(x => Boolean(opts[x]));\n\nmodule.exports = opts => {\n\tif (!opts) {\n\t\treturn null;\n\t}\n\n\tif (opts.stdio && hasAlias(opts)) {\n\t\tthrow new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${alias.map(x => `\\`${x}\\``).join(', ')}`);\n\t}\n\n\tif (typeof opts.stdio === 'string') {\n\t\treturn opts.stdio;\n\t}\n\n\tconst stdio = opts.stdio || [];\n\n\tif (!Array.isArray(stdio)) {\n\t\tthrow new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n\t}\n\n\tconst result = [];\n\tconst len = Math.max(stdio.length, alias.length);\n\n\tfor (let i = 0; i < len; i++) {\n\t\tlet value = null;\n\n\t\tif (stdio[i] !== undefined) {\n\t\t\tvalue = stdio[i];\n\t\t} else if (opts[alias[i]] !== undefined) {\n\t\t\tvalue = opts[alias[i]];\n\t\t}\n\n\t\tresult[i] = value;\n\t}\n\n\treturn result;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;AAE3C,MAAMC,QAAQ,GAAGC,IAAI,IAAIF,KAAK,CAACG,IAAI,CAACC,CAAC,IAAIC,OAAO,CAACH,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC;AAE1DE,MAAM,CAACC,OAAO,GAAGL,IAAI,IAAI;EACxB,IAAI,CAACA,IAAI,EAAE;IACV,OAAO,IAAI;EACZ;EAEA,IAAIA,IAAI,CAACM,KAAK,IAAIP,QAAQ,CAACC,IAAI,CAAC,EAAE;IACjC,MAAM,IAAIO,KAAK,CAAE,qEAAoET,KAAK,CAACU,GAAG,CAACN,CAAC,IAAK,KAAIA,CAAE,IAAG,CAAC,CAACO,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;EAC9H;EAEA,IAAI,OAAOT,IAAI,CAACM,KAAK,KAAK,QAAQ,EAAE;IACnC,OAAON,IAAI,CAACM,KAAK;EAClB;EAEA,MAAMA,KAAK,GAAGN,IAAI,CAACM,KAAK,IAAI,EAAE;EAE9B,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIM,SAAS,CAAE,mEAAkE,OAAON,KAAM,IAAG,CAAC;EACzG;EAEA,MAAMO,MAAM,GAAG,EAAE;EACjB,MAAMC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACV,KAAK,CAACW,MAAM,EAAEnB,KAAK,CAACmB,MAAM,CAAC;EAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;IAC7B,IAAIC,KAAK,GAAG,IAAI;IAEhB,IAAIb,KAAK,CAACY,CAAC,CAAC,KAAKE,SAAS,EAAE;MAC3BD,KAAK,GAAGb,KAAK,CAACY,CAAC,CAAC;IACjB,CAAC,MAAM,IAAIlB,IAAI,CAACF,KAAK,CAACoB,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MACxCD,KAAK,GAAGnB,IAAI,CAACF,KAAK,CAACoB,CAAC,CAAC,CAAC;IACvB;IAEAL,MAAM,CAACK,CAAC,CAAC,GAAGC,KAAK;EAClB;EAEA,OAAON,MAAM;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}