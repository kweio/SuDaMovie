{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 引入登录验证组件\nimport SIdentify from \"@/components/SIdentify\";\nexport default {\n  name: \"MyLogin\",\n  data() {\n    return {\n      //-------------分割线--------------\n      // 密码登录部分\n      user: {\n        name: \"\",\n        //用户名\n        password: \"\" //密码\n      },\n\n      passwordCode: \"\",\n      //输入的验证码\n      identifyCode: \"\",\n      //密码登录图形验证码\n      identifyCodes: \"1234567890\" //生成图形验证码的依据\n    };\n  },\n\n  computed: {},\n  components: {\n    SIdentify\n  },\n  methods: {\n    // 登录按钮触发\n    async login() {\n      // 密码登录\n      if (!this.user.name) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入用户名\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\"\n        });\n      }\n      if (!this.user.password) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入密码\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\"\n        });\n      }\n      if (!this.passwordCode) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入验证码\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\"\n        });\n      }\n      if (this.passwordCode !== this.identifyCode) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入正确的验证码\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\"\n        });\n      }\n      // 验证通过,发送登录请求\n      const res = await this.$http.post('/login', this.user); // eslint-disable-line\n      //保存token\n      window.localStorage.setItem(\"WebToken\", res.data.token);\n      window.localStorage.setItem(\"userId\", res.data.userID);\n      if (res.data.status !== 300) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: res.data.message,\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\"\n        });\n      } else {\n        this.$toast({\n          type: 'success',\n          message: '登录成功'\n        });\n        await this.$router.push('/mine');\n      }\n    },\n    // 密码登录验证码部分\n    // 刷新验证码\n    refreshIdentifyCode() {\n      this.identifyCode = \"\";\n      this.makeIdentifyCode(4);\n    },\n    // 生成l位数的随机验证码\n    makeIdentifyCode(l) {\n      for (let i = 0; i < l; i++) {\n        this.identifyCode += this.identifyCodes[this.randomNum(0, this.identifyCodes.length)];\n      }\n    },\n    // 生成单个验证码\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    }\n  },\n  mounted() {\n    // 初始化验证码\n    this.identifyCode = \"\";\n    this.makeIdentifyCode(4);\n  }\n};","map":{"version":3,"mappings":";AAuDA;AACA;AAEA;EACAA;EACAC;IACA;MACA;MACA;MACAC;QACAF;QAAA;QACAG;MACA;;MACAC;MAAA;MACAC;MAAA;MACAC;IACA;EACA;;EACAC;EACAC;IAAAC;EAAA;EACAC;IACA;IACA;MACA;MACA;QACA;UACAC;UACAC;UACAC;UACAC;QACA;MACA;MACA;QACA;UACAH;UACAC;UACAC;UACAC;QACA;MACA;MACA;QACA;UACAH;UACAC;UACAC;UACAC;QACA;MACA;MACA;QACA;UACAH;UACAC;UACAC;UACAC;QACA;MACA;MACA;MACA;MACA;MACAC;MACAA;MAEA;QACA;UACAJ;UACAC;UACAC;UACAC;QACA;MACA;QACA;UACAE;UACAJ;QACA;QACA;MACA;IACA;IACA;IACA;IACAK;MACA;MACA;IACA;IACA;IACAC;MACA;QACA,qBACA;MACA;IACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;EACA;AACA","names":["name","data","user","password","passwordCode","identifyCode","identifyCodes","computed","components","SIdentify","methods","title","message","theme","confirmButtonColor","window","type","refreshIdentifyCode","makeIdentifyCode","randomNum","mounted"],"sourceRoot":"src/views/login","sources":["MyLogin.vue"],"sourcesContent":["<template>\n  <div class=\"login\">\n    <!--    <div class=\"header\">-->\n    <!--      <van-icon name=\"cross\" />-->\n    <!--    </div>-->\n    <!-- 登录内容部分 -->\n    <div class=\"login-container\">\n      <!-- 登录头部部分 -->\n      <div class=\"login-header\">\n        <i class=\"eng-title\">SuDa Movie</i>\n      </div>\n      <!-- 登录内容部分 -->\n      <div class=\"login-content\">\n        <!-- 登录部分 -->\n        <div class=\"login-main\">\n          <form>\n            <!-- 密码登录部分 -->\n            <div class=\"login-phone\">\n              <section class=\"login-info\">\n                <input\n                    type=\"text\"\n                    placeholder=\"请输入用户名\"\n                    v-model=\"user.name\"\n                />\n              </section>\n              <section class=\"login-info\">\n                <input\n                    type=\"password\"\n                    placeholder=\"请输入密码\"\n                    v-model=\"user.password\"\n                />\n              </section>\n              <section class=\"login-info\">\n                <!-- 验证码组件 -->\n                <input\n                    type=\"text\"\n                    placeholder=\"请输入验证码\"\n                    v-model=\"passwordCode\"\n                />\n                <div @click.prevent=\"refreshIdentifyCode\">\n                  <SIdentify :identifyCode=\"identifyCode\" class=\"codeBtn\">\n                  </SIdentify>\n                </div>\n              </section>\n            </div>\n            <button class=\"login-submit\" @click.prevent=\"login\">登录</button>\n            <a href=\"../login/MyRegister.vue\" class=\"register-submit\" >立即注册</a>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// 引入登录验证组件\nimport SIdentify from \"@/components/SIdentify\";\n\nexport default {\n  name: \"MyLogin\",\n  data() {\n    return {\n      //-------------分割线--------------\n      // 密码登录部分\n      user:{\n        name: \"\", //用户名\n        password: \"\", //密码\n      },\n      passwordCode: \"\", //输入的验证码\n      identifyCode: \"\", //密码登录图形验证码\n      identifyCodes: \"1234567890\", //生成图形验证码的依据\n    };\n  },\n  computed: {},\n  components: {SIdentify},\n  methods: {\n    // 登录按钮触发\n    async login() {\n      // 密码登录\n      if (!this.user.name) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入用户名\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\",\n        });\n      }\n      if (!this.user.password) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入密码\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\",\n        });\n      }\n      if (!this.passwordCode) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入验证码\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\",\n        });\n      }\n      if (this.passwordCode !== this.identifyCode) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: \"请输入正确的验证码\",\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\",\n        });\n      }\n      // 验证通过,发送登录请求\n      const res = await this.$http.post('/login',this.user) // eslint-disable-line\n      //保存token\n      window.localStorage.setItem(\"WebToken\", res.data.token);\n      window.localStorage.setItem(\"userId\", res.data.userID);\n\n      if (res.data.status !== 300) {\n        return this.$dialog.alert({\n          title: \"提示\",\n          message: res.data.message,\n          theme: \"round-button\",\n          confirmButtonColor: \"#6F9839\",\n        });\n      }else {\n        this.$toast({\n          type:'success',\n          message:'登录成功'\n        });\n        await this.$router.push('/mine')\n      }\n    },\n    // 密码登录验证码部分\n    // 刷新验证码\n    refreshIdentifyCode() {\n      this.identifyCode = \"\";\n      this.makeIdentifyCode(4);\n    },\n    // 生成l位数的随机验证码\n    makeIdentifyCode(l) {\n      for (let i = 0; i < l; i++) {\n        this.identifyCode +=\n            this.identifyCodes[this.randomNum(0, this.identifyCodes.length)];\n      }\n    },\n    // 生成单个验证码\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n  },\n  mounted() {\n    // 初始化验证码\n    this.identifyCode = \"\";\n    this.makeIdentifyCode(4);\n  },\n}\n\n</script>\n\n<style lang=\"less\" scoped>\n.body {\n  margin: 0;\n}\n\n/* 外部容器样式 */\n.login {\n  width: 100vw;\n  height: 100vh;\n  /* 渐变背景 */\n  background: linear-gradient(125deg, #ffbe32, #b3fffa, #b6f597, #fdff79);\n  /* 指定背景图像的大小 */\n  background-size: 500%;\n  /* 执行动画：动画名 时长 线性的 无限次播放 */\n  animation: bgAnimation 15s linear infinite;\n}\n\n/* 定义动画 */\n@keyframes bgAnimation {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n// 登录内容部分\n.login-container {\n  //margin-top: 1.5385rem;\n  // 登录头部部分\n  .login-header {\n    padding-top: 3.5385rem;\n    font-size: 2.5385rem;\n    color: #6F9839;\n    text-align: center;\n\n    span {\n      font-size: 7.6923rem;\n    }\n  }\n\n  // 登录内容部分\n  .login-content {\n    // 登录部分\n    .login-main {\n      padding: 2.7692rem 3.0769rem;\n      // 1.手机验证码登录与密码登录部分\n      // 这俩部分样式都一样\n      .login-info {\n        position: relative;\n        width: 100%;\n        height: 3.0769rem;\n        //padding-top: 1.5385rem;\n        input {\n          width: 100%;\n          height: 100%;\n          //border: none;\n          border-radius: 0.3846rem;\n          padding: 0 1rem;\n          font-size: 1.0769rem;\n          box-sizing: border-box;\n          border: 0.0769rem solid transparent;\n        }\n        // 验证码按钮样式\n        .codeBtn {\n          position: absolute;\n          right: 0.9692rem;\n          border: none;\n          //padding-left: 3.3846rem;\n          background: transparent;\n          top: 50%;\n          transform: translate(10%, -50%);\n        }\n        。register-submit{\n          float: right;\n        }\n      }\n\n      .login-phone {\n        height: 11.5385rem;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        // 提示部分样式\n        .login-tip {\n          text-align: justify;\n          color: rgb(150, 150, 150);\n\n          a {\n            //color: #fa209f;\n          }\n        }\n      }\n\n      // 登录按钮部分\n      .login-submit {\n        margin-top: 0.7692rem;\n        width: 100%;\n        font-size: 1.2308rem;\n        padding: 1.1538rem 0;\n        color: #fff;\n        background-color: #6F9839;\n        border: none;\n        border-radius: 0.3846rem;\n      }\n    }\n  }\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}