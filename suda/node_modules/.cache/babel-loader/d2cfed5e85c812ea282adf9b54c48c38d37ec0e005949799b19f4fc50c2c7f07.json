{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst pathKey = require('path-key')();\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n  const cwd = process.cwd();\n  const hasCustomCwd = parsed.options.cwd != null;\n\n  // If a custom `cwd` was specified, we need to change the process cwd\n  // because `which` will do stat calls but does not support a custom cwd\n  if (hasCustomCwd) {\n    try {\n      process.chdir(parsed.options.cwd);\n    } catch (err) {\n      /* Empty */\n    }\n  }\n  let resolved;\n  try {\n    resolved = which.sync(parsed.command, {\n      path: (parsed.options.env || process.env)[pathKey],\n      pathExt: withoutPathExt ? path.delimiter : undefined\n    });\n  } catch (e) {\n    /* Empty */\n  } finally {\n    process.chdir(cwd);\n  }\n\n  // If we successfully resolved, ensure that an absolute path is returned\n  // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n  if (resolved) {\n    resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n  }\n  return resolved;\n}\nfunction resolveCommand(parsed) {\n  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\nmodule.exports = resolveCommand;","map":{"version":3,"names":["path","require","which","pathKey","resolveCommandAttempt","parsed","withoutPathExt","cwd","process","hasCustomCwd","options","chdir","err","resolved","sync","command","env","pathExt","delimiter","undefined","e","resolve","resolveCommand","module","exports"],"sources":["D:/WebSpace/SuDaMovie/suda/node_modules/cross-spawn/lib/util/resolveCommand.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst pathKey = require('path-key')();\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (hasCustomCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: (parsed.options.env || process.env)[pathKey],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        process.chdir(cwd);\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAU,CAAC,EAAE;AAErC,SAASG,qBAAqB,CAACC,MAAM,EAAEC,cAAc,EAAE;EACnD,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAG,EAAE;EACzB,MAAME,YAAY,GAAGJ,MAAM,CAACK,OAAO,CAACH,GAAG,IAAI,IAAI;;EAE/C;EACA;EACA,IAAIE,YAAY,EAAE;IACd,IAAI;MACAD,OAAO,CAACG,KAAK,CAACN,MAAM,CAACK,OAAO,CAACH,GAAG,CAAC;IACrC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACV;IAAA;EAER;EAEA,IAAIC,QAAQ;EAEZ,IAAI;IACAA,QAAQ,GAAGX,KAAK,CAACY,IAAI,CAACT,MAAM,CAACU,OAAO,EAAE;MAClCf,IAAI,EAAE,CAACK,MAAM,CAACK,OAAO,CAACM,GAAG,IAAIR,OAAO,CAACQ,GAAG,EAAEb,OAAO,CAAC;MAClDc,OAAO,EAAEX,cAAc,GAAGN,IAAI,CAACkB,SAAS,GAAGC;IAC/C,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,CAAC,EAAE;IACR;EAAA,CACH,SAAS;IACNZ,OAAO,CAACG,KAAK,CAACJ,GAAG,CAAC;EACtB;;EAEA;EACA;EACA,IAAIM,QAAQ,EAAE;IACVA,QAAQ,GAAGb,IAAI,CAACqB,OAAO,CAACZ,YAAY,GAAGJ,MAAM,CAACK,OAAO,CAACH,GAAG,GAAG,EAAE,EAAEM,QAAQ,CAAC;EAC7E;EAEA,OAAOA,QAAQ;AACnB;AAEA,SAASS,cAAc,CAACjB,MAAM,EAAE;EAC5B,OAAOD,qBAAqB,CAACC,MAAM,CAAC,IAAID,qBAAqB,CAACC,MAAM,EAAE,IAAI,CAAC;AAC/E;AAEAkB,MAAM,CAACC,OAAO,GAAGF,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}