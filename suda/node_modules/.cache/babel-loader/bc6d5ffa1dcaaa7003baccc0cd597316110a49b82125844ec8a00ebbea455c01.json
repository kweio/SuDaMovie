{"ast":null,"code":"'use strict';\n\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [ 0] }]*/\n\n/**\n * @module entities\n */\nconst os = require('os');\n\n/**\n * @class Defaults\n * @description Defaults Entity\n */\nclass Defaults {\n  /**\n   * @constructor\n   * @method constructor\n   * @return {void}\n   */\n  constructor() {\n    this.appspace = 'app.';\n    this.socketRoot = '/tmp/';\n    this.id = os.hostname();\n    this.encoding = 'utf8';\n    this.rawBuffer = false;\n    this.sync = false;\n    this.unlink = true;\n    this.delimiter = '\\f';\n    this.silent = false;\n    this.logDepth = 5;\n    this.logInColor = true;\n    this.logger = console.log.bind(console);\n    this.maxConnections = 100;\n    this.retry = 500;\n    this.maxRetries = Infinity;\n    this.stopRetrying = false;\n    this.IPType = getIPType();\n    this.tls = false;\n    this.networkHost = this.IPType == 'IPv6' ? '::1' : '127.0.0.1';\n    this.networkPort = 8000;\n    this.readableAll = false;\n    this.writableAll = false;\n    this.interface = {\n      localAddress: false,\n      localPort: false,\n      family: false,\n      hints: false,\n      lookup: false\n    };\n  }\n}\n\n/**\n * method to get ip type\n *\n * @method getIPType\n * @return {string} ip type\n */\nfunction getIPType() {\n  const networkInterfaces = os.networkInterfaces();\n  let IPType = '';\n  if (networkInterfaces && Array.isArray(networkInterfaces) && networkInterfaces.length > 0) {\n    // getting the family of first network interface available\n    IPType = networkInterfaces[Object.keys(networkInterfaces)[0]][0].family;\n  }\n  return IPType;\n}\nmodule.exports = Defaults;","map":{"version":3,"names":["os","require","Defaults","constructor","appspace","socketRoot","id","hostname","encoding","rawBuffer","sync","unlink","delimiter","silent","logDepth","logInColor","logger","console","log","bind","maxConnections","retry","maxRetries","Infinity","stopRetrying","IPType","getIPType","tls","networkHost","networkPort","readableAll","writableAll","interface","localAddress","localPort","family","hints","lookup","networkInterfaces","Array","isArray","length","Object","keys","module","exports"],"sources":["D:/WebSpace/SuDaMovie/suda/node_modules/@achrinza/node-ipc/entities/Defaults.js"],"sourcesContent":["'use strict';\n\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [ 0] }]*/\n\n/**\n * @module entities\n */\n\nconst os = require('os');\n\n/**\n * @class Defaults\n * @description Defaults Entity\n */\nclass Defaults{\n\n    /**\n     * @constructor\n     * @method constructor\n     * @return {void}\n     */\n    constructor(){\n\n        this.appspace='app.';\n        this.socketRoot='/tmp/';\n        this.id=os.hostname();\n\n        this.encoding='utf8';\n        this.rawBuffer=false;\n        this.sync=false;\n        this.unlink=true;\n\n        this.delimiter='\\f';\n\n        this.silent=false;\n        this.logDepth=5;\n        this.logInColor=true;\n        this.logger=console.log.bind(console);\n\n        this.maxConnections=100;\n        this.retry=500;\n        this.maxRetries=Infinity;\n        this.stopRetrying=false;\n\n        this.IPType=getIPType();\n        this.tls=false;\n        this.networkHost = (this.IPType == 'IPv6') ? '::1' : '127.0.0.1';\n        this.networkPort = 8000;\n\n        this.readableAll = false;\n        this.writableAll = false;\n\n        this.interface={\n            localAddress:false,\n            localPort:false,\n            family:false,\n            hints:false,\n            lookup:false\n        }\n    }\n}\n\n/**\n * method to get ip type\n *\n * @method getIPType\n * @return {string} ip type\n */\nfunction getIPType() {\n    const networkInterfaces = os.networkInterfaces();\n    let IPType = '';\n    if (networkInterfaces\n        && Array.isArray(networkInterfaces)\n        && networkInterfaces.length > 0) {\n        // getting the family of first network interface available\n        IPType = networkInterfaces [\n            Object.keys( networkInterfaces )[0]\n        ][0].family;\n    }\n    return IPType;\n}\n\nmodule.exports=Defaults;\n"],"mappings":"AAAA,YAAY;;AAEZ;;AAEA;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;;AAExB;AACA;AACA;AACA;AACA,MAAMC,QAAQ;EAEV;AACJ;AACA;AACA;AACA;EACIC,WAAW,GAAE;IAET,IAAI,CAACC,QAAQ,GAAC,MAAM;IACpB,IAAI,CAACC,UAAU,GAAC,OAAO;IACvB,IAAI,CAACC,EAAE,GAACN,EAAE,CAACO,QAAQ,EAAE;IAErB,IAAI,CAACC,QAAQ,GAAC,MAAM;IACpB,IAAI,CAACC,SAAS,GAAC,KAAK;IACpB,IAAI,CAACC,IAAI,GAAC,KAAK;IACf,IAAI,CAACC,MAAM,GAAC,IAAI;IAEhB,IAAI,CAACC,SAAS,GAAC,IAAI;IAEnB,IAAI,CAACC,MAAM,GAAC,KAAK;IACjB,IAAI,CAACC,QAAQ,GAAC,CAAC;IACf,IAAI,CAACC,UAAU,GAAC,IAAI;IACpB,IAAI,CAACC,MAAM,GAACC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACF,OAAO,CAAC;IAErC,IAAI,CAACG,cAAc,GAAC,GAAG;IACvB,IAAI,CAACC,KAAK,GAAC,GAAG;IACd,IAAI,CAACC,UAAU,GAACC,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAC,KAAK;IAEvB,IAAI,CAACC,MAAM,GAACC,SAAS,EAAE;IACvB,IAAI,CAACC,GAAG,GAAC,KAAK;IACd,IAAI,CAACC,WAAW,GAAI,IAAI,CAACH,MAAM,IAAI,MAAM,GAAI,KAAK,GAAG,WAAW;IAChE,IAAI,CAACI,WAAW,GAAG,IAAI;IAEvB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,WAAW,GAAG,KAAK;IAExB,IAAI,CAACC,SAAS,GAAC;MACXC,YAAY,EAAC,KAAK;MAClBC,SAAS,EAAC,KAAK;MACfC,MAAM,EAAC,KAAK;MACZC,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC;IACX,CAAC;EACL;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASX,SAAS,GAAG;EACjB,MAAMY,iBAAiB,GAAGtC,EAAE,CAACsC,iBAAiB,EAAE;EAChD,IAAIb,MAAM,GAAG,EAAE;EACf,IAAIa,iBAAiB,IACdC,KAAK,CAACC,OAAO,CAACF,iBAAiB,CAAC,IAChCA,iBAAiB,CAACG,MAAM,GAAG,CAAC,EAAE;IACjC;IACAhB,MAAM,GAAGa,iBAAiB,CACtBI,MAAM,CAACC,IAAI,CAAEL,iBAAiB,CAAE,CAAC,CAAC,CAAC,CACtC,CAAC,CAAC,CAAC,CAACH,MAAM;EACf;EACA,OAAOV,MAAM;AACjB;AAEAmB,MAAM,CAACC,OAAO,GAAC3C,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}