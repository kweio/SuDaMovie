{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst parseJson = require('parse-json');\nconst readFileAsync = promisify(fs.readFile);\nmodule.exports = async options => {\n  options = {\n    cwd: process.cwd(),\n    normalize: true,\n    ...options\n  };\n  const filePath = path.resolve(options.cwd, 'package.json');\n  const json = parseJson(await readFileAsync(filePath, 'utf8'));\n  if (options.normalize) {\n    require('normalize-package-data')(json);\n  }\n  return json;\n};\nmodule.exports.sync = options => {\n  options = {\n    cwd: process.cwd(),\n    normalize: true,\n    ...options\n  };\n  const filePath = path.resolve(options.cwd, 'package.json');\n  const json = parseJson(fs.readFileSync(filePath, 'utf8'));\n  if (options.normalize) {\n    require('normalize-package-data')(json);\n  }\n  return json;\n};","map":{"version":3,"names":["promisify","require","fs","path","parseJson","readFileAsync","readFile","module","exports","options","cwd","process","normalize","filePath","resolve","json","sync","readFileSync"],"sources":["D:/WebSpace/SuDaMovie/suda/node_modules/read-pkg/index.js"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst parseJson = require('parse-json');\n\nconst readFileAsync = promisify(fs.readFile);\n\nmodule.exports = async options => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tnormalize: true,\n\t\t...options\n\t};\n\n\tconst filePath = path.resolve(options.cwd, 'package.json');\n\tconst json = parseJson(await readFileAsync(filePath, 'utf8'));\n\n\tif (options.normalize) {\n\t\trequire('normalize-package-data')(json);\n\t}\n\n\treturn json;\n};\n\nmodule.exports.sync = options => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tnormalize: true,\n\t\t...options\n\t};\n\n\tconst filePath = path.resolve(options.cwd, 'package.json');\n\tconst json = parseJson(fs.readFileSync(filePath, 'utf8'));\n\n\tif (options.normalize) {\n\t\trequire('normalize-package-data')(json);\n\t}\n\n\treturn json;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAACA;AAAS,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAY,CAAC;AAEvC,MAAMI,aAAa,GAAGL,SAAS,CAACE,EAAE,CAACI,QAAQ,CAAC;AAE5CC,MAAM,CAACC,OAAO,GAAG,MAAMC,OAAO,IAAI;EACjCA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAG,EAAE;IAClBE,SAAS,EAAE,IAAI;IACf,GAAGH;EACJ,CAAC;EAED,MAAMI,QAAQ,GAAGV,IAAI,CAACW,OAAO,CAACL,OAAO,CAACC,GAAG,EAAE,cAAc,CAAC;EAC1D,MAAMK,IAAI,GAAGX,SAAS,CAAC,MAAMC,aAAa,CAACQ,QAAQ,EAAE,MAAM,CAAC,CAAC;EAE7D,IAAIJ,OAAO,CAACG,SAAS,EAAE;IACtBX,OAAO,CAAC,wBAAwB,CAAC,CAACc,IAAI,CAAC;EACxC;EAEA,OAAOA,IAAI;AACZ,CAAC;AAEDR,MAAM,CAACC,OAAO,CAACQ,IAAI,GAAGP,OAAO,IAAI;EAChCA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAG,EAAE;IAClBE,SAAS,EAAE,IAAI;IACf,GAAGH;EACJ,CAAC;EAED,MAAMI,QAAQ,GAAGV,IAAI,CAACW,OAAO,CAACL,OAAO,CAACC,GAAG,EAAE,cAAc,CAAC;EAC1D,MAAMK,IAAI,GAAGX,SAAS,CAACF,EAAE,CAACe,YAAY,CAACJ,QAAQ,EAAE,MAAM,CAAC,CAAC;EAEzD,IAAIJ,OAAO,CAACG,SAAS,EAAE;IACtBX,OAAO,CAAC,wBAAwB,CAAC,CAACc,IAAI,CAAC;EACxC;EAEA,OAAOA,IAAI;AACZ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}